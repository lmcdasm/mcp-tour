// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/servers": {
            "get": {
                "description": "Basic Health Check to verify ServerManager is running",
                "tags": [
                    "servers"
                ],
                "summary": "ServerManager HealthCheck",
                "responses": {
                    "200": {
                        "description": "HC - ServerManager Running",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/servers/add_components": {
            "post": {
                "description": "Adds Prompt, Resource and Tool elements to a given MCP Server Instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "servers"
                ],
                "summary": "Add MCP Component to Server (Prompt, Resource or Tool)",
                "parameters": [
                    {
                        "description": "Add McpServer Component Request Input",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.AddMcpServerComponentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "MCP Server - Add Server Components - Successfully added to Instance",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "MCP Server - Add Server Components Failed - Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "MCP Server - Add Server Components - Failed to Add Components to Server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/servers/create": {
            "post": {
                "description": "Creates (Defines) a blank MCP Server Instance with a Unique ID and Address in Runtime",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "servers"
                ],
                "summary": "Create (define)  a new MCP Server Instance to the System",
                "parameters": [
                    {
                        "description": "Create McpServer Request Input",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateMcpServerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "MCP Server - Create Server Instance - Success - Instance Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "MCP Server - Create Server Instance - Failed - Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "MCP Server - Create Server Instance - Failed - Error Adding Server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "jsonschema.Schema": {
            "type": "object"
        },
        "main.AddMcpServerComponentRequest": {
            "type": "object"
        },
        "main.CreateMcpServerRequest": {
            "type": "object",
            "properties": {
                "addr": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "mcp.ToolAnnotations": {
            "type": "object",
            "properties": {
                "destructiveHint": {
                    "description": "If true, the tool may perform destructive updates to its environment. If\nfalse, the tool performs only additive updates.\n\n(This property is meaningful only when ` + "`" + `readOnlyHint == false` + "`" + `)\n\nDefault: true",
                    "type": "boolean"
                },
                "idempotentHint": {
                    "description": "If true, calling the tool repeatedly with the same arguments will have no\nadditional effect on the its environment.\n\n(This property is meaningful only when ` + "`" + `readOnlyHint == false` + "`" + `)\n\nDefault: false",
                    "type": "boolean"
                },
                "openWorldHint": {
                    "description": "If true, this tool may interact with an \"open world\" of external entities. If\nfalse, the tool's domain of interaction is closed. For example, the world of\na web search tool is open, whereas that of a memory tool is not.\n\nDefault: true",
                    "type": "boolean"
                },
                "readOnlyHint": {
                    "description": "If true, the tool does not modify its environment.\n\nDefault: false",
                    "type": "boolean"
                },
                "title": {
                    "description": "A human-readable title for the tool.",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.2",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "MCP Explorer - MCP Server APIs",
	Description:      "APIs for MCP Server Instantiation, Configuration and Handling",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
